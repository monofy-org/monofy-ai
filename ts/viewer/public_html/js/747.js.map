{"version":3,"file":"747.js","mappings":"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","sources":["webpack://monofy/./src/viewer.ts"],"sourcesContent":["import { ArcRotateCamera } from \"@babylonjs/core/Cameras/arcRotateCamera\";\r\nimport { Engine } from \"@babylonjs/core/Engines/engine\";\r\nimport { HemisphericLight } from \"@babylonjs/core/Lights/hemisphericLight\";\r\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture\";\r\nimport { StandardMaterial } from \"@babylonjs/core/Materials/standardMaterial\";\r\nimport { Color3, Color4 } from \"@babylonjs/core/Maths/math.color\";\r\nimport { PointLight } from \"@babylonjs/core/Lights/pointLight\";\r\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\r\nimport { MeshBuilder } from \"@babylonjs/core/Meshes/meshBuilder\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\nimport { PointerEventTypes } from \"@babylonjs/core/Events/pointerEvents\";\r\nimport { Nullable } from \"@babylonjs/core/types\";\r\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\r\nimport { GizmoManager } from \"@babylonjs/core/Gizmos/gizmoManager\";\r\nimport { PositionGizmo } from \"@babylonjs/core/Gizmos/positionGizmo\";\r\nimport { RotationGizmo } from \"@babylonjs/core/Gizmos/rotationGizmo\";\r\nimport \"@babylonjs/core/Helpers/sceneHelpers\";\r\nimport { ScaleGizmo } from \"@babylonjs/core/Gizmos/scaleGizmo\";\r\nimport { BoundingBoxGizmo } from \"@babylonjs/core/Gizmos/boundingBoxGizmo\";\r\nimport { GroundMesh } from \"@babylonjs/core/Meshes/groundMesh\";\r\n//import { Inspector } from \"@babylonjs/inspector\";\r\n\r\nconst win = window as any;\r\n\r\nexport class Viewer {\r\n  private readonly _canvas: HTMLCanvasElement;\r\n  private readonly _engine: Engine;\r\n  private readonly _scene: Scene;\r\n  private readonly _camera: ArcRotateCamera;\r\n  private readonly _defaultMaterial;\r\n  private _selectedMesh: Nullable<AbstractMesh> = null;\r\n  public readonly gizmoManager: GizmoManager;\r\n  public readonly cursorPosition: Vector3 = Vector3.Zero();\r\n\r\n  ground: GroundMesh;\r\n\r\n  constructor(canvasElement?: HTMLCanvasElement) {\r\n    if (canvasElement === undefined) {\r\n      this._canvas = document.createElement(\"canvas\");\r\n      document.body.appendChild(this._canvas);\r\n    } else {\r\n      this._canvas = canvasElement;\r\n    }\r\n\r\n    this._canvas.width = win.innerWidth;\r\n    this._canvas.height = win.innerHeight;\r\n    win.addEventListener(\"resize\", () => {\r\n      this._canvas.width = win.innerWidth;\r\n      this._canvas.height = win.innerHeight;\r\n    });\r\n\r\n    this._engine = new Engine(this._canvas, true);\r\n    this._scene = new Scene(this._engine);\r\n    // Inspector.Show(this._scene, {\r\n    //   enableClose: false,\r\n    //   enablePopup: false,\r\n    //   overlay: true,\r\n    // });\r\n    this._defaultMaterial = new StandardMaterial(\r\n      \"defaultMaterial\",\r\n      this._scene\r\n    );\r\n    this._defaultMaterial.diffuseColor = new Color3(0.8, 0.8, 0.8); // Off white color\r\n    this._defaultMaterial.specularColor = new Color3(0, 0, 0); // No shininess\r\n    this._camera = new ArcRotateCamera(\r\n      \"camera\",\r\n      0,\r\n      0,\r\n      10,\r\n      Vector3.Zero(),\r\n      this._scene\r\n    );\r\n    this._camera.attachControl(this._canvas, true);\r\n\r\n    const light = new HemisphericLight(\r\n      \"light\",\r\n      new Vector3(0, 1, 0),\r\n      this._scene\r\n    );\r\n    light.intensity = 0.7;\r\n\r\n    const pointLight = new PointLight(\r\n      \"pointLight\",\r\n      new Vector3(0, 10, 0),\r\n      this._scene\r\n    );\r\n    pointLight.intensity = 0.7;\r\n\r\n    this.gizmoManager = this._createGizmos();\r\n    this.ground = this._createGround();\r\n\r\n    this._engine.runRenderLoop(() => {\r\n      this._scene.render();\r\n    });\r\n  }\r\n\r\n  public get domElement() {\r\n    return this._canvas;\r\n  }\r\n\r\n  private _createGround(width: number = 10, height: number = 10): GroundMesh {\r\n    if (this.ground) {\r\n      this.ground.dispose();\r\n    }\r\n\r\n    const ground = MeshBuilder.CreateGround(\r\n      \"ground\",\r\n      { width, height },\r\n      this._scene\r\n    );\r\n    ground.material = this._defaultMaterial;\r\n\r\n    return ground;\r\n  }\r\n\r\n  private _createGizmos(): GizmoManager {\r\n    if (this.gizmoManager) {\r\n      throw new Error(\"Gizmo manager already created\");\r\n    }\r\n\r\n    let clickedMesh: Nullable<AbstractMesh> = null;\r\n    let clickedTime = 0;\r\n\r\n    win.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n      if (event.key === \"Delete\") {\r\n        if (this._selectedMesh) {\r\n          gizmoManager.attachToMesh(null);\r\n          this._selectedMesh.dispose();\r\n        }\r\n      } else if (event.key === \"e\") {\r\n        if (this._selectedMesh) {\r\n          gizmoManager.rotationGizmoEnabled = true;\r\n          gizmoManager.positionGizmoEnabled = false;\r\n          gizmoManager.scaleGizmoEnabled = false;\r\n          gizmoManager.boundingBoxGizmoEnabled = false;\r\n        }\r\n      } else if (event.key === \"w\") {\r\n        if (this._selectedMesh) {\r\n          gizmoManager.positionGizmoEnabled = true;\r\n          gizmoManager.rotationGizmoEnabled = false;\r\n          gizmoManager.scaleGizmoEnabled = false;\r\n          gizmoManager.boundingBoxGizmoEnabled = false;\r\n        }\r\n      } else if (event.key === \"q\") {\r\n        if (this._selectedMesh) {\r\n          gizmoManager.positionGizmoEnabled = true;\r\n          gizmoManager.rotationGizmoEnabled = true;\r\n          gizmoManager.scaleGizmoEnabled = false;\r\n          gizmoManager.boundingBoxGizmoEnabled = false;\r\n        }\r\n      } else if (event.key === \"s\") {\r\n        if (this._selectedMesh) {\r\n          gizmoManager.positionGizmoEnabled = false;\r\n          gizmoManager.rotationGizmoEnabled = false;\r\n          gizmoManager.scaleGizmoEnabled = true;\r\n          gizmoManager.boundingBoxGizmoEnabled = false;\r\n        }\r\n      } else if (event.key === \"r\") {\r\n        if (this._selectedMesh) {\r\n          gizmoManager.boundingBoxGizmoEnabled = true;\r\n          gizmoManager.positionGizmoEnabled = false;\r\n          gizmoManager.rotationGizmoEnabled = false;\r\n          gizmoManager.scaleGizmoEnabled = false;\r\n        }\r\n      } else if (event.key == \"Escape\") {\r\n        this.deselectAll();\r\n      }\r\n    });\r\n\r\n    this._scene.onPointerObservable.add((eventData) => {\r\n      if (eventData.type === PointerEventTypes.POINTERDOWN) {\r\n        clickedTime = new Date().getTime();\r\n        if (eventData.pickInfo?.hit) {\r\n          clickedMesh = eventData.pickInfo.pickedMesh;\r\n        }\r\n      } else if (eventData.type === PointerEventTypes.POINTERUP) {\r\n        if (new Date().getTime() - clickedTime > 200) {\r\n          return;\r\n        }\r\n        if (\r\n          eventData.pickInfo?.hit &&\r\n          eventData.pickInfo.pickedMesh === clickedMesh\r\n        ) {\r\n          console.log(eventData.pickInfo.pickedMesh?.name);\r\n\r\n          // Store the selected mesh\r\n          this._selectedMesh = eventData.pickInfo.pickedMesh;\r\n          // this._scene.debugLayer.select(selectedMesh);\r\n\r\n          gizmoManager.positionGizmoEnabled = true;\r\n          gizmoManager.rotationGizmoEnabled = false;\r\n          gizmoManager.scaleGizmoEnabled = false;\r\n          gizmoManager.boundingBoxGizmoEnabled = false;\r\n          gizmoManager.attachToMesh(this._selectedMesh);\r\n        } else {\r\n          // Deselect the mesh\r\n          this.deselectAll();\r\n        }\r\n      }\r\n    });\r\n\r\n    const gizmoManager = new GizmoManager(this._scene);\r\n    gizmoManager.gizmos.positionGizmo = new PositionGizmo();\r\n    gizmoManager.gizmos.rotationGizmo = new RotationGizmo();\r\n    gizmoManager.gizmos.scaleGizmo = new ScaleGizmo();\r\n    gizmoManager.gizmos.boundingBoxGizmo = new BoundingBoxGizmo();\r\n    gizmoManager.positionGizmoEnabled = false;\r\n    gizmoManager.rotationGizmoEnabled = false;\r\n    gizmoManager.scaleGizmoEnabled = false;\r\n    gizmoManager.boundingBoxGizmoEnabled = false;\r\n\r\n    return gizmoManager;\r\n  }\r\n\r\n  public deselectAll(): void {\r\n    this._selectedMesh = null;\r\n    this.gizmoManager.attachToMesh(null);\r\n    this.gizmoManager.positionGizmoEnabled = false;\r\n    this.gizmoManager.rotationGizmoEnabled = false;\r\n    this.gizmoManager.scaleGizmoEnabled = false;\r\n    this.gizmoManager.boundingBoxGizmoEnabled = false;\r\n  }\r\n\r\n  public addBox(position: Vector3, rotation: Vector3, size: Vector3) {\r\n    const box = MeshBuilder.CreateBox(\"box\", { size: 1 }, this._scene);\r\n    box.position = position;\r\n    box.rotation = rotation;\r\n    box.scaling = size;\r\n    box.material = this._defaultMaterial;\r\n  }\r\n\r\n  public enableXR() {\r\n    const floor = this._scene.getMeshByName(\"floor\");\r\n    if (!floor) {\r\n      throw new Error(\"Floor not found\");\r\n    }\r\n    this._scene.createDefaultXRExperienceAsync({\r\n      floorMeshes: [floor],\r\n    });\r\n  }\r\n}\r\n"],"names":["win","window","canvasElement","_selectedMesh","cursorPosition","Zero","undefined","this","_canvas","document","createElement","body","appendChild","width","innerWidth","height","innerHeight","addEventListener","_engine","_scene","_defaultMaterial","diffuseColor","specularColor","_camera","attachControl","intensity","gizmoManager","_createGizmos","ground","_createGround","runRenderLoop","render","dispose","CreateGround","material","Error","clickedMesh","clickedTime","event","key","attachToMesh","rotationGizmoEnabled","positionGizmoEnabled","scaleGizmoEnabled","boundingBoxGizmoEnabled","deselectAll","onPointerObservable","add","eventData","type","POINTERDOWN","Date","getTime","pickInfo","hit","pickedMesh","POINTERUP","console","log","name","gizmos","positionGizmo","rotationGizmo","scaleGizmo","boundingBoxGizmo","addBox","position","rotation","size","box","CreateBox","scaling","enableXR","floor","getMeshByName","createDefaultXRExperienceAsync","floorMeshes"],"sourceRoot":""}