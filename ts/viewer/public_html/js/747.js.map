{"version":3,"file":"747.js","mappings":"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","sources":["webpack://monofy/./src/viewer.ts"],"sourcesContent":["import { ArcRotateCamera } from \"@babylonjs/core/Cameras/arcRotateCamera\";\r\nimport { Engine } from \"@babylonjs/core/Engines/engine\";\r\nimport { HemisphericLight } from \"@babylonjs/core/Lights/hemisphericLight\";\r\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture\";\r\nimport { StandardMaterial } from \"@babylonjs/core/Materials/standardMaterial\";\r\nimport { Color3, Color4 } from \"@babylonjs/core/Maths/math.color\";\r\nimport { PointLight } from \"@babylonjs/core/Lights/pointLight\";\r\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\r\nimport { MeshBuilder } from \"@babylonjs/core/Meshes/meshBuilder\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\nimport { PointerEventTypes } from \"@babylonjs/core/Events/pointerEvents\";\r\nimport { Nullable } from \"@babylonjs/core/types\";\r\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\r\nimport { GizmoManager } from \"@babylonjs/core/Gizmos/gizmoManager\";\r\nimport { PositionGizmo } from \"@babylonjs/core/Gizmos/positionGizmo\";\r\nimport { RotationGizmo } from \"@babylonjs/core/Gizmos/rotationGizmo\";\r\nimport \"@babylonjs/core/Helpers/sceneHelpers\";\r\nimport { ScaleGizmo } from \"@babylonjs/core/Gizmos/scaleGizmo\";\r\nimport { BoundingBoxGizmo } from \"@babylonjs/core/Gizmos/boundingBoxGizmo\";\r\nimport { GroundMesh } from \"@babylonjs/core/Meshes/groundMesh\";\r\n//import { Inspector } from \"@babylonjs/inspector\";\r\n\r\nconst win = window as any;\r\n\r\nexport class Viewer {\r\n  private readonly _canvas: HTMLCanvasElement;\r\n  private readonly _engine: Engine;\r\n  private readonly _scene: Scene;\r\n  private readonly _camera: ArcRotateCamera;\r\n  private readonly _cursor: Mesh;\r\n  private readonly _defaultMaterial;\r\n  private _selectedMesh: Nullable<AbstractMesh> = null;\r\n  public readonly gizmoManager: GizmoManager;\r\n  public readonly cursorPosition: Vector3 = Vector3.Zero();\r\n\r\n  ground: GroundMesh;\r\n\r\n  constructor(canvasElement?: HTMLCanvasElement) {\r\n    if (canvasElement === undefined) {\r\n      this._canvas = document.createElement(\"canvas\");\r\n      document.body.appendChild(this._canvas);\r\n    } else {\r\n      this._canvas = canvasElement;\r\n    }\r\n\r\n    this._canvas.width = win.innerWidth;\r\n    this._canvas.height = win.innerHeight;\r\n    win.addEventListener(\"resize\", () => {\r\n      this._canvas.width = win.innerWidth;\r\n      this._canvas.height = win.innerHeight;\r\n    });\r\n\r\n    this._engine = new Engine(this._canvas, true);\r\n    this._scene = new Scene(this._engine);\r\n    // Inspector.Show(this._scene, {\r\n    //   enableClose: false,\r\n    //   enablePopup: false,\r\n    //   overlay: true,\r\n    // });\r\n    this._cursor = MeshBuilder.CreateSphere(\r\n      \"cursor\",\r\n      { diameter: 0.1, segments: 16 },\r\n      this._scene\r\n    );\r\n\r\n    const cursorMaterial = new StandardMaterial(\"cursorMaterial\", this._scene);\r\n    cursorMaterial.diffuseColor = new Color3(0, 1, 0); // Green color\r\n    cursorMaterial.specularColor = new Color3(0, 0, 0); // No shininess\r\n    this._cursor.material = cursorMaterial;\r\n    this._cursor.material.alpha = 0.5;\r\n    this._cursor.isVisible = false;\r\n\r\n    this._defaultMaterial = new StandardMaterial(\r\n      \"defaultMaterial\",\r\n      this._scene\r\n    );\r\n    this._defaultMaterial.diffuseColor = new Color3(0.8, 0.8, 0.8); // Off white color\r\n    this._defaultMaterial.specularColor = new Color3(0, 0, 0); // No shininess\r\n    this._camera = new ArcRotateCamera(\r\n      \"camera\",\r\n      0,\r\n      0,\r\n      10,\r\n      Vector3.Zero(),\r\n      this._scene\r\n    );\r\n    this._camera.attachControl(this._canvas, true);\r\n\r\n    const light = new HemisphericLight(\r\n      \"light\",\r\n      new Vector3(0, 1, 0),\r\n      this._scene\r\n    );\r\n    light.intensity = 0.7;\r\n\r\n    const pointLight = new PointLight(\r\n      \"pointLight\",\r\n      new Vector3(0, 10, 0),\r\n      this._scene\r\n    );\r\n    pointLight.intensity = 0.7;\r\n\r\n    this.gizmoManager = this._createGizmos();\r\n    this.ground = this._createGround();\r\n\r\n    this._engine.runRenderLoop(() => {\r\n      this._scene.render();\r\n    });\r\n  }\r\n\r\n  public get domElement() {\r\n    return this._canvas;\r\n  }\r\n\r\n  private _createGround(width: number = 10, height: number = 10): GroundMesh {\r\n    if (this.ground) {\r\n      this.ground.dispose();\r\n    }\r\n\r\n    const ground = MeshBuilder.CreateGround(\r\n      \"ground\",\r\n      { width, height },\r\n      this._scene\r\n    );\r\n    ground.material = this._defaultMaterial;\r\n\r\n    return ground;\r\n  }\r\n\r\n  private _createGizmos(): GizmoManager {\r\n    if (this.gizmoManager) {\r\n      throw new Error(\"Gizmo manager already created\");\r\n    }\r\n\r\n    win.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n      if (event.key === \"Delete\") {\r\n        if (this._selectedMesh) {\r\n          gizmoManager.attachToMesh(null);\r\n          this._selectedMesh.dispose();\r\n        }\r\n      } else if (event.key === \"e\") {\r\n        if (this._selectedMesh) {\r\n          gizmoManager.rotationGizmoEnabled = true;\r\n          gizmoManager.positionGizmoEnabled = false;\r\n          gizmoManager.scaleGizmoEnabled = false;\r\n          gizmoManager.boundingBoxGizmoEnabled = false;\r\n        }\r\n      } else if (event.key === \"w\") {\r\n        if (this._selectedMesh) {\r\n          gizmoManager.positionGizmoEnabled = true;\r\n          gizmoManager.rotationGizmoEnabled = false;\r\n          gizmoManager.scaleGizmoEnabled = false;\r\n          gizmoManager.boundingBoxGizmoEnabled = false;\r\n        }\r\n      } else if (event.key === \"q\") {\r\n        if (this._selectedMesh) {\r\n          gizmoManager.positionGizmoEnabled = true;\r\n          gizmoManager.rotationGizmoEnabled = true;\r\n          gizmoManager.scaleGizmoEnabled = false;\r\n          gizmoManager.boundingBoxGizmoEnabled = false;\r\n        }\r\n      } else if (event.key === \"s\") {\r\n        if (this._selectedMesh) {\r\n          gizmoManager.positionGizmoEnabled = false;\r\n          gizmoManager.rotationGizmoEnabled = false;\r\n          gizmoManager.scaleGizmoEnabled = true;\r\n          gizmoManager.boundingBoxGizmoEnabled = false;\r\n        }\r\n      } else if (event.key === \"r\") {\r\n        if (this._selectedMesh) {\r\n          gizmoManager.boundingBoxGizmoEnabled = true;\r\n          gizmoManager.positionGizmoEnabled = false;\r\n          gizmoManager.rotationGizmoEnabled = false;\r\n          gizmoManager.scaleGizmoEnabled = false;\r\n        }\r\n      } else if (event.key == \"Escape\") {\r\n        this.deselectAll();\r\n      }\r\n    });\r\n\r\n    this._scene.onPointerObservable.add((eventData) => {\r\n      if (eventData.type === PointerEventTypes.POINTERDOWN) {\r\n        const pickResult = this._scene.pick(\r\n          this._scene.pointerX,\r\n          this._scene.pointerY\r\n        );\r\n        if (pickResult.hit && pickResult.pickedPoint) {\r\n          this.cursorPosition.copyFrom(pickResult.pickedPoint);\r\n          this._cursor.position.copyFrom(this.cursorPosition);\r\n          this._cursor.isVisible = true;\r\n        }\r\n      } else if (eventData.type === PointerEventTypes.POINTERDOUBLETAP) {\r\n        if (eventData.pickInfo?.hit) {\r\n          // Store the selected mesh\r\n          this._selectedMesh = eventData.pickInfo.pickedMesh;\r\n          // this._scene.debugLayer.select(selectedMesh);\r\n\r\n          gizmoManager.positionGizmoEnabled = true;\r\n          gizmoManager.rotationGizmoEnabled = false;\r\n          gizmoManager.scaleGizmoEnabled = false;\r\n          gizmoManager.boundingBoxGizmoEnabled = false;\r\n          gizmoManager.attachToMesh(this._selectedMesh);\r\n        } else {\r\n          // Deselect the mesh\r\n          this.deselectAll();\r\n        }\r\n      }\r\n    });\r\n\r\n    const gizmoManager = new GizmoManager(this._scene);\r\n    gizmoManager.gizmos.positionGizmo = new PositionGizmo();\r\n    gizmoManager.gizmos.rotationGizmo = new RotationGizmo();\r\n    gizmoManager.gizmos.scaleGizmo = new ScaleGizmo();\r\n    gizmoManager.gizmos.boundingBoxGizmo = new BoundingBoxGizmo();\r\n    gizmoManager.positionGizmoEnabled = false;\r\n    gizmoManager.rotationGizmoEnabled = false;\r\n    gizmoManager.scaleGizmoEnabled = false;\r\n    gizmoManager.boundingBoxGizmoEnabled = false;\r\n\r\n    return gizmoManager;\r\n  }\r\n\r\n  public deselectAll(): void {\r\n    this._selectedMesh = null;\r\n    this.gizmoManager.attachToMesh(null);\r\n    this.gizmoManager.positionGizmoEnabled = false;\r\n    this.gizmoManager.rotationGizmoEnabled = false;\r\n    this.gizmoManager.scaleGizmoEnabled = false;\r\n    this.gizmoManager.boundingBoxGizmoEnabled = false;\r\n  }\r\n\r\n  public addBox(position: Vector3, rotation: Vector3, size: Vector3) {\r\n    const box = MeshBuilder.CreateBox(\"box\", { size: 1 }, this._scene);\r\n    box.position = position;\r\n    box.rotation = rotation;\r\n    box.scaling = size;\r\n    box.material = this._defaultMaterial;\r\n  }\r\n\r\n  public enableXR() {\r\n    const floor = this._scene.getMeshByName(\"floor\");\r\n    if (!floor) {\r\n      throw new Error(\"Floor not found\");\r\n    }\r\n    this._scene.createDefaultXRExperienceAsync({\r\n      floorMeshes: [floor],\r\n    });\r\n  }\r\n}\r\n"],"names":["win","window","canvasElement","_selectedMesh","cursorPosition","Zero","undefined","this","_canvas","document","createElement","body","appendChild","width","innerWidth","height","innerHeight","addEventListener","_engine","_scene","_cursor","CreateSphere","diameter","segments","cursorMaterial","diffuseColor","specularColor","material","alpha","isVisible","_defaultMaterial","_camera","attachControl","intensity","gizmoManager","_createGizmos","ground","_createGround","runRenderLoop","render","dispose","CreateGround","Error","event","key","attachToMesh","rotationGizmoEnabled","positionGizmoEnabled","scaleGizmoEnabled","boundingBoxGizmoEnabled","deselectAll","onPointerObservable","add","eventData","type","POINTERDOWN","pickResult","pick","pointerX","pointerY","hit","pickedPoint","copyFrom","position","POINTERDOUBLETAP","pickInfo","pickedMesh","gizmos","positionGizmo","rotationGizmo","scaleGizmo","boundingBoxGizmo","addBox","rotation","size","box","CreateBox","scaling","enableXR","floor","getMeshByName","createDefaultXRExperienceAsync","floorMeshes"],"sourceRoot":""}